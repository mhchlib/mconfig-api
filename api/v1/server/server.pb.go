// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/v1/server.proto

package server

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WatchConfigStreamRequest struct {
	AppKey               string            `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	EnvKey               string            `protobuf:"bytes,2,opt,name=env_key,json=envKey,proto3" json:"env_key,omitempty"`
	ConfigKeys           []string          `protobuf:"bytes,3,rep,name=config_keys,json=configKeys,proto3" json:"config_keys,omitempty"`
	Metadata             map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WatchConfigStreamRequest) Reset()         { *m = WatchConfigStreamRequest{} }
func (m *WatchConfigStreamRequest) String() string { return proto.CompactTextString(m) }
func (*WatchConfigStreamRequest) ProtoMessage()    {}
func (*WatchConfigStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c2b3ce2e73d961, []int{0}
}
func (m *WatchConfigStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchConfigStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchConfigStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchConfigStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchConfigStreamRequest.Merge(m, src)
}
func (m *WatchConfigStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *WatchConfigStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchConfigStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchConfigStreamRequest proto.InternalMessageInfo

func (m *WatchConfigStreamRequest) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

func (m *WatchConfigStreamRequest) GetEnvKey() string {
	if m != nil {
		return m.EnvKey
	}
	return ""
}

func (m *WatchConfigStreamRequest) GetConfigKeys() []string {
	if m != nil {
		return m.ConfigKeys
	}
	return nil
}

func (m *WatchConfigStreamRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type ConfigVal struct {
	ConfigKey            string   `protobuf:"bytes,1,opt,name=config_key,json=configKey,proto3" json:"config_key,omitempty"`
	Val                  string   `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigVal) Reset()         { *m = ConfigVal{} }
func (m *ConfigVal) String() string { return proto.CompactTextString(m) }
func (*ConfigVal) ProtoMessage()    {}
func (*ConfigVal) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c2b3ce2e73d961, []int{1}
}
func (m *ConfigVal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigVal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigVal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigVal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigVal.Merge(m, src)
}
func (m *ConfigVal) XXX_Size() int {
	return m.Size()
}
func (m *ConfigVal) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigVal.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigVal proto.InternalMessageInfo

func (m *ConfigVal) GetConfigKey() string {
	if m != nil {
		return m.ConfigKey
	}
	return ""
}

func (m *ConfigVal) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

type WatchConfigStreamResponse struct {
	Configs              []*ConfigVal `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *WatchConfigStreamResponse) Reset()         { *m = WatchConfigStreamResponse{} }
func (m *WatchConfigStreamResponse) String() string { return proto.CompactTextString(m) }
func (*WatchConfigStreamResponse) ProtoMessage()    {}
func (*WatchConfigStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c2b3ce2e73d961, []int{2}
}
func (m *WatchConfigStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchConfigStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchConfigStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchConfigStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchConfigStreamResponse.Merge(m, src)
}
func (m *WatchConfigStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *WatchConfigStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchConfigStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchConfigStreamResponse proto.InternalMessageInfo

func (m *WatchConfigStreamResponse) GetConfigs() []*ConfigVal {
	if m != nil {
		return m.Configs
	}
	return nil
}

type GetNodeStoreDataResponse struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeStoreDataResponse) Reset()         { *m = GetNodeStoreDataResponse{} }
func (m *GetNodeStoreDataResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodeStoreDataResponse) ProtoMessage()    {}
func (*GetNodeStoreDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c2b3ce2e73d961, []int{3}
}
func (m *GetNodeStoreDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeStoreDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeStoreDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeStoreDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeStoreDataResponse.Merge(m, src)
}
func (m *GetNodeStoreDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNodeStoreDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeStoreDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeStoreDataResponse proto.InternalMessageInfo

func (m *GetNodeStoreDataResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetNodeStoreDataRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeStoreDataRequest) Reset()         { *m = GetNodeStoreDataRequest{} }
func (m *GetNodeStoreDataRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodeStoreDataRequest) ProtoMessage()    {}
func (*GetNodeStoreDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c2b3ce2e73d961, []int{4}
}
func (m *GetNodeStoreDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeStoreDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeStoreDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeStoreDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeStoreDataRequest.Merge(m, src)
}
func (m *GetNodeStoreDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNodeStoreDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeStoreDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeStoreDataRequest proto.InternalMessageInfo

type UpdateConfigRequest struct {
	App                  string   `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Env                  string   `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	Config               string   `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	Filter               string   `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Val                  string   `protobuf:"bytes,5,opt,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateConfigRequest) Reset()         { *m = UpdateConfigRequest{} }
func (m *UpdateConfigRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateConfigRequest) ProtoMessage()    {}
func (*UpdateConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c2b3ce2e73d961, []int{5}
}
func (m *UpdateConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateConfigRequest.Merge(m, src)
}
func (m *UpdateConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateConfigRequest proto.InternalMessageInfo

func (m *UpdateConfigRequest) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *UpdateConfigRequest) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *UpdateConfigRequest) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *UpdateConfigRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *UpdateConfigRequest) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

type UpdateFilterRequest struct {
	App                  string   `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Env                  string   `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	Filter               string   `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateFilterRequest) Reset()         { *m = UpdateFilterRequest{} }
func (m *UpdateFilterRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateFilterRequest) ProtoMessage()    {}
func (*UpdateFilterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c2b3ce2e73d961, []int{6}
}
func (m *UpdateFilterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateFilterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateFilterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateFilterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFilterRequest.Merge(m, src)
}
func (m *UpdateFilterRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateFilterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFilterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFilterRequest proto.InternalMessageInfo

func (m *UpdateFilterRequest) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *UpdateFilterRequest) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *UpdateFilterRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type UpdateConfiResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateConfiResponse) Reset()         { *m = UpdateConfiResponse{} }
func (m *UpdateConfiResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateConfiResponse) ProtoMessage()    {}
func (*UpdateConfiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c2b3ce2e73d961, []int{7}
}
func (m *UpdateConfiResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateConfiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateConfiResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateConfiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateConfiResponse.Merge(m, src)
}
func (m *UpdateConfiResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateConfiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateConfiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateConfiResponse proto.InternalMessageInfo

type GetNodeDetailResponse struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeDetailResponse) Reset()         { *m = GetNodeDetailResponse{} }
func (m *GetNodeDetailResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodeDetailResponse) ProtoMessage()    {}
func (*GetNodeDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c2b3ce2e73d961, []int{8}
}
func (m *GetNodeDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeDetailResponse.Merge(m, src)
}
func (m *GetNodeDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNodeDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeDetailResponse proto.InternalMessageInfo

func (m *GetNodeDetailResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeletConfigRequest struct {
	App                  string   `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Env                  string   `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	Config               string   `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletConfigRequest) Reset()         { *m = DeletConfigRequest{} }
func (m *DeletConfigRequest) String() string { return proto.CompactTextString(m) }
func (*DeletConfigRequest) ProtoMessage()    {}
func (*DeletConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c2b3ce2e73d961, []int{9}
}
func (m *DeletConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletConfigRequest.Merge(m, src)
}
func (m *DeletConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeletConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletConfigRequest proto.InternalMessageInfo

func (m *DeletConfigRequest) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *DeletConfigRequest) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *DeletConfigRequest) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

type DeletFilterRequest struct {
	App                  string   `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Env                  string   `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletFilterRequest) Reset()         { *m = DeletFilterRequest{} }
func (m *DeletFilterRequest) String() string { return proto.CompactTextString(m) }
func (*DeletFilterRequest) ProtoMessage()    {}
func (*DeletFilterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c2b3ce2e73d961, []int{10}
}
func (m *DeletFilterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletFilterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletFilterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletFilterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletFilterRequest.Merge(m, src)
}
func (m *DeletFilterRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeletFilterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletFilterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletFilterRequest proto.InternalMessageInfo

func (m *DeletFilterRequest) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *DeletFilterRequest) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func init() {
	proto.RegisterType((*WatchConfigStreamRequest)(nil), "api.sdk.WatchConfigStreamRequest")
	proto.RegisterMapType((map[string]string)(nil), "api.sdk.WatchConfigStreamRequest.MetadataEntry")
	proto.RegisterType((*ConfigVal)(nil), "api.sdk.ConfigVal")
	proto.RegisterType((*WatchConfigStreamResponse)(nil), "api.sdk.WatchConfigStreamResponse")
	proto.RegisterType((*GetNodeStoreDataResponse)(nil), "api.sdk.GetNodeStoreDataResponse")
	proto.RegisterType((*GetNodeStoreDataRequest)(nil), "api.sdk.GetNodeStoreDataRequest")
	proto.RegisterType((*UpdateConfigRequest)(nil), "api.sdk.UpdateConfigRequest")
	proto.RegisterType((*UpdateFilterRequest)(nil), "api.sdk.UpdateFilterRequest")
	proto.RegisterType((*UpdateConfiResponse)(nil), "api.sdk.UpdateConfiResponse")
	proto.RegisterType((*GetNodeDetailResponse)(nil), "api.sdk.GetNodeDetailResponse")
	proto.RegisterType((*DeletConfigRequest)(nil), "api.sdk.DeletConfigRequest")
	proto.RegisterType((*DeletFilterRequest)(nil), "api.sdk.DeletFilterRequest")
}

func init() { proto.RegisterFile("proto/v1/server.proto", fileDescriptor_84c2b3ce2e73d961) }

var fileDescriptor_84c2b3ce2e73d961 = []byte{
	// 620 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xeb, 0xb4, 0xf9, 0x72, 0xdb, 0x4a, 0xfd, 0x06, 0xda, 0xba, 0x2e, 0x84, 0x74, 0x56,
	0x91, 0x28, 0x36, 0x94, 0x4d, 0x05, 0x88, 0x05, 0xa4, 0x45, 0x55, 0x29, 0x02, 0x57, 0x80, 0x60,
	0x03, 0x93, 0xe4, 0x36, 0xb1, 0xea, 0x9f, 0xc1, 0x9e, 0x58, 0x8a, 0x78, 0x11, 0xde, 0x83, 0x97,
	0x60, 0xc9, 0x23, 0xa0, 0xf2, 0x10, 0x6c, 0x91, 0x3d, 0x63, 0x37, 0xff, 0x50, 0x89, 0x45, 0xa4,
	0x99, 0xfb, 0x73, 0xee, 0xb9, 0x27, 0x27, 0x13, 0x58, 0xe7, 0x51, 0x28, 0x42, 0x3b, 0xb9, 0x67,
	0xc7, 0x18, 0x25, 0x18, 0x59, 0xd9, 0x9d, 0x54, 0x18, 0x77, 0xad, 0xb8, 0x73, 0x6e, 0x6e, 0x77,
	0xc3, 0xb0, 0xeb, 0xa1, 0x9d, 0x85, 0x5b, 0xfd, 0x33, 0x1b, 0x7d, 0x2e, 0x06, 0xb2, 0x8a, 0xfe,
	0xd2, 0xc0, 0x78, 0xcb, 0x44, 0xbb, 0xf7, 0x34, 0x0c, 0xce, 0xdc, 0xee, 0xa9, 0x88, 0x90, 0xf9,
	0x0e, 0x7e, 0xea, 0x63, 0x2c, 0xc8, 0x26, 0x54, 0x18, 0xe7, 0x1f, 0xce, 0x71, 0x60, 0x68, 0x75,
	0xad, 0x51, 0x75, 0x96, 0x18, 0xe7, 0xc7, 0x38, 0x48, 0x13, 0x18, 0x24, 0x59, 0x62, 0x41, 0x26,
	0x30, 0x48, 0xd2, 0xc4, 0x2d, 0x58, 0x6e, 0x67, 0x40, 0x69, 0x2e, 0x36, 0xf4, 0xba, 0xde, 0xa8,
	0x3a, 0x20, 0x43, 0xc7, 0x38, 0x88, 0xc9, 0x31, 0xfc, 0xe7, 0xa3, 0x60, 0x1d, 0x26, 0x98, 0x51,
	0xae, 0xeb, 0x8d, 0xe5, 0x3d, 0xdb, 0x52, 0x44, 0xad, 0x59, 0x3c, 0xac, 0x13, 0xd5, 0x71, 0x10,
	0x88, 0x68, 0xe0, 0x14, 0x00, 0xe6, 0x43, 0x58, 0x1d, 0x49, 0x91, 0x35, 0xd0, 0x2f, 0xc9, 0xa6,
	0x47, 0x72, 0x1d, 0x16, 0x13, 0xe6, 0xf5, 0x51, 0xf1, 0x94, 0x97, 0x07, 0x0b, 0xfb, 0x1a, 0x7d,
	0x04, 0x55, 0x39, 0xeb, 0x0d, 0xf3, 0xc8, 0x4d, 0x80, 0x4b, 0xde, 0xaa, 0xbf, 0x5a, 0xd0, 0x4e,
	0x71, 0x13, 0xe6, 0x19, 0xba, 0xc4, 0x4d, 0x98, 0x47, 0x8f, 0x60, 0x6b, 0x0a, 0xdd, 0x98, 0x87,
	0x41, 0x8c, 0x64, 0x17, 0x2a, 0xb2, 0x37, 0x36, 0xb4, 0x6c, 0x47, 0x52, 0xec, 0x58, 0x8c, 0x74,
	0xf2, 0x12, 0x6a, 0x81, 0xf1, 0x0c, 0xc5, 0x8b, 0xb0, 0x83, 0xa7, 0x22, 0x8c, 0xb0, 0xc9, 0x04,
	0x2b, 0x90, 0x08, 0x94, 0x33, 0xa9, 0x52, 0x46, 0x2b, 0x4e, 0x76, 0xa6, 0x5b, 0xb0, 0x39, 0x59,
	0x9f, 0x09, 0x45, 0x3f, 0xc3, 0xb5, 0xd7, 0xbc, 0xc3, 0x04, 0xca, 0x31, 0xf9, 0xf7, 0xb8, 0x06,
	0x3a, 0xe3, 0x3c, 0x97, 0x85, 0x71, 0x9e, 0x46, 0x30, 0x48, 0x94, 0x28, 0xe9, 0x91, 0x6c, 0xc0,
	0x92, 0x24, 0xa4, 0xb6, 0x54, 0xb7, 0x34, 0x7e, 0xe6, 0x7a, 0x02, 0x23, 0xa3, 0x2c, 0xe3, 0xf2,
	0x96, 0x4b, 0xb2, 0x78, 0x29, 0xc9, 0xab, 0x7c, 0xf8, 0x61, 0x56, 0x71, 0xc5, 0xe1, 0x6a, 0x88,
	0x3e, 0x3c, 0x84, 0xae, 0x8f, 0xec, 0x93, 0xab, 0x42, 0x6f, 0xc3, 0xba, 0x52, 0xa0, 0x89, 0x82,
	0xb9, 0xde, 0x5c, 0xb9, 0x5e, 0x02, 0x69, 0xa2, 0x87, 0xe2, 0x9f, 0x49, 0x42, 0xf7, 0x15, 0xe2,
	0x95, 0xf7, 0xdc, 0xfb, 0x5a, 0x86, 0xca, 0x89, 0x24, 0x42, 0x3e, 0xc2, 0xff, 0x13, 0x0e, 0x22,
	0x3b, 0x7f, 0xfc, 0x31, 0x98, 0x74, 0x5e, 0x89, 0x12, 0xa8, 0xd4, 0xd0, 0xee, 0x6a, 0xe4, 0x1d,
	0xac, 0x8d, 0x1b, 0x85, 0xd4, 0x8b, 0xee, 0x19, 0x1e, 0x32, 0x77, 0xe6, 0x54, 0xe4, 0xf0, 0xe4,
	0x39, 0xac, 0x0c, 0x1b, 0x8d, 0xdc, 0x28, 0x9a, 0xa6, 0xf8, 0xcf, 0x9c, 0x9a, 0x1d, 0x42, 0x3b,
	0xcc, 0xd1, 0xa4, 0xa2, 0x13, 0x68, 0x23, 0x42, 0x9b, 0x1b, 0x96, 0x7c, 0xd0, 0xac, 0xfc, 0x41,
	0xb3, 0x0e, 0xd2, 0x07, 0x8d, 0x96, 0xc8, 0x11, 0xac, 0x8e, 0xf8, 0x82, 0xcc, 0x28, 0x35, 0x6b,
	0xe3, 0x3b, 0x8e, 0xfa, 0x88, 0x96, 0x48, 0x13, 0x96, 0x87, 0x5c, 0x43, 0xb6, 0x8b, 0x86, 0x49,
	0x2f, 0xcd, 0x21, 0x94, 0xa3, 0xa8, 0xbd, 0xc6, 0x50, 0xfe, 0x72, 0xad, 0x27, 0x8f, 0xbf, 0x5d,
	0xd4, 0xb4, 0xef, 0x17, 0x35, 0xed, 0xc7, 0x45, 0x4d, 0xfb, 0xf2, 0xb3, 0x56, 0x7a, 0xbf, 0xdb,
	0x75, 0x45, 0xaf, 0xdf, 0xb2, 0xda, 0xa1, 0x6f, 0xfb, 0xbd, 0x76, 0xcf, 0x73, 0x5b, 0xb6, 0x2f,
	0xdd, 0x79, 0x87, 0x71, 0xd7, 0x4e, 0x3f, 0xc5, 0xff, 0x41, 0x6b, 0x29, 0x43, 0xbc, 0xff, 0x3b,
	0x00, 0x00, 0xff, 0xff, 0xe7, 0x80, 0xfa, 0x38, 0x29, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MConfigClient is the client API for MConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MConfigClient interface {
	WatchConfigStream(ctx context.Context, opts ...grpc.CallOption) (MConfig_WatchConfigStreamClient, error)
	GetNodeStoreData(ctx context.Context, in *GetNodeStoreDataRequest, opts ...grpc.CallOption) (*GetNodeStoreDataResponse, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfiResponse, error)
	UpdateFilter(ctx context.Context, in *UpdateFilterRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetNodeDetail(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetNodeDetailResponse, error)
	DeletConfig(ctx context.Context, in *DeletConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeletFilter(ctx context.Context, in *DeletFilterRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type mConfigClient struct {
	cc *grpc.ClientConn
}

func NewMConfigClient(cc *grpc.ClientConn) MConfigClient {
	return &mConfigClient{cc}
}

func (c *mConfigClient) WatchConfigStream(ctx context.Context, opts ...grpc.CallOption) (MConfig_WatchConfigStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MConfig_serviceDesc.Streams[0], "/api.sdk.MConfig/WatchConfigStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mConfigWatchConfigStreamClient{stream}
	return x, nil
}

type MConfig_WatchConfigStreamClient interface {
	Send(*WatchConfigStreamRequest) error
	Recv() (*WatchConfigStreamResponse, error)
	grpc.ClientStream
}

type mConfigWatchConfigStreamClient struct {
	grpc.ClientStream
}

func (x *mConfigWatchConfigStreamClient) Send(m *WatchConfigStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mConfigWatchConfigStreamClient) Recv() (*WatchConfigStreamResponse, error) {
	m := new(WatchConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mConfigClient) GetNodeStoreData(ctx context.Context, in *GetNodeStoreDataRequest, opts ...grpc.CallOption) (*GetNodeStoreDataResponse, error) {
	out := new(GetNodeStoreDataResponse)
	err := c.cc.Invoke(ctx, "/api.sdk.MConfig/GetNodeStoreData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mConfigClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfiResponse, error) {
	out := new(UpdateConfiResponse)
	err := c.cc.Invoke(ctx, "/api.sdk.MConfig/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mConfigClient) UpdateFilter(ctx context.Context, in *UpdateFilterRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.sdk.MConfig/UpdateFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mConfigClient) GetNodeDetail(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetNodeDetailResponse, error) {
	out := new(GetNodeDetailResponse)
	err := c.cc.Invoke(ctx, "/api.sdk.MConfig/GetNodeDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mConfigClient) DeletConfig(ctx context.Context, in *DeletConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.sdk.MConfig/DeletConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mConfigClient) DeletFilter(ctx context.Context, in *DeletFilterRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.sdk.MConfig/DeletFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MConfigServer is the server API for MConfig service.
type MConfigServer interface {
	WatchConfigStream(MConfig_WatchConfigStreamServer) error
	GetNodeStoreData(context.Context, *GetNodeStoreDataRequest) (*GetNodeStoreDataResponse, error)
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfiResponse, error)
	UpdateFilter(context.Context, *UpdateFilterRequest) (*empty.Empty, error)
	GetNodeDetail(context.Context, *empty.Empty) (*GetNodeDetailResponse, error)
	DeletConfig(context.Context, *DeletConfigRequest) (*empty.Empty, error)
	DeletFilter(context.Context, *DeletFilterRequest) (*empty.Empty, error)
}

// UnimplementedMConfigServer can be embedded to have forward compatible implementations.
type UnimplementedMConfigServer struct {
}

func (*UnimplementedMConfigServer) WatchConfigStream(srv MConfig_WatchConfigStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchConfigStream not implemented")
}
func (*UnimplementedMConfigServer) GetNodeStoreData(ctx context.Context, req *GetNodeStoreDataRequest) (*GetNodeStoreDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeStoreData not implemented")
}
func (*UnimplementedMConfigServer) UpdateConfig(ctx context.Context, req *UpdateConfigRequest) (*UpdateConfiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (*UnimplementedMConfigServer) UpdateFilter(ctx context.Context, req *UpdateFilterRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilter not implemented")
}
func (*UnimplementedMConfigServer) GetNodeDetail(ctx context.Context, req *empty.Empty) (*GetNodeDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeDetail not implemented")
}
func (*UnimplementedMConfigServer) DeletConfig(ctx context.Context, req *DeletConfigRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletConfig not implemented")
}
func (*UnimplementedMConfigServer) DeletFilter(ctx context.Context, req *DeletFilterRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletFilter not implemented")
}

func RegisterMConfigServer(s *grpc.Server, srv MConfigServer) {
	s.RegisterService(&_MConfig_serviceDesc, srv)
}

func _MConfig_WatchConfigStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MConfigServer).WatchConfigStream(&mConfigWatchConfigStreamServer{stream})
}

type MConfig_WatchConfigStreamServer interface {
	Send(*WatchConfigStreamResponse) error
	Recv() (*WatchConfigStreamRequest, error)
	grpc.ServerStream
}

type mConfigWatchConfigStreamServer struct {
	grpc.ServerStream
}

func (x *mConfigWatchConfigStreamServer) Send(m *WatchConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mConfigWatchConfigStreamServer) Recv() (*WatchConfigStreamRequest, error) {
	m := new(WatchConfigStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MConfig_GetNodeStoreData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeStoreDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MConfigServer).GetNodeStoreData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sdk.MConfig/GetNodeStoreData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MConfigServer).GetNodeStoreData(ctx, req.(*GetNodeStoreDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MConfig_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MConfigServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sdk.MConfig/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MConfigServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MConfig_UpdateFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MConfigServer).UpdateFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sdk.MConfig/UpdateFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MConfigServer).UpdateFilter(ctx, req.(*UpdateFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MConfig_GetNodeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MConfigServer).GetNodeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sdk.MConfig/GetNodeDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MConfigServer).GetNodeDetail(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MConfig_DeletConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MConfigServer).DeletConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sdk.MConfig/DeletConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MConfigServer).DeletConfig(ctx, req.(*DeletConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MConfig_DeletFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MConfigServer).DeletFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sdk.MConfig/DeletFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MConfigServer).DeletFilter(ctx, req.(*DeletFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MConfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.sdk.MConfig",
	HandlerType: (*MConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeStoreData",
			Handler:    _MConfig_GetNodeStoreData_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _MConfig_UpdateConfig_Handler,
		},
		{
			MethodName: "UpdateFilter",
			Handler:    _MConfig_UpdateFilter_Handler,
		},
		{
			MethodName: "GetNodeDetail",
			Handler:    _MConfig_GetNodeDetail_Handler,
		},
		{
			MethodName: "DeletConfig",
			Handler:    _MConfig_DeletConfig_Handler,
		},
		{
			MethodName: "DeletFilter",
			Handler:    _MConfig_DeletFilter_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchConfigStream",
			Handler:       _MConfig_WatchConfigStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/v1/server.proto",
}

func (m *WatchConfigStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchConfigStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchConfigStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintServer(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServer(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServer(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ConfigKeys) > 0 {
		for iNdEx := len(m.ConfigKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ConfigKeys[iNdEx])
			copy(dAtA[i:], m.ConfigKeys[iNdEx])
			i = encodeVarintServer(dAtA, i, uint64(len(m.ConfigKeys[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.EnvKey) > 0 {
		i -= len(m.EnvKey)
		copy(dAtA[i:], m.EnvKey)
		i = encodeVarintServer(dAtA, i, uint64(len(m.EnvKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppKey) > 0 {
		i -= len(m.AppKey)
		copy(dAtA[i:], m.AppKey)
		i = encodeVarintServer(dAtA, i, uint64(len(m.AppKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigVal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigVal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigVal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConfigKey) > 0 {
		i -= len(m.ConfigKey)
		copy(dAtA[i:], m.ConfigKey)
		i = encodeVarintServer(dAtA, i, uint64(len(m.ConfigKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchConfigStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchConfigStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchConfigStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Configs) > 0 {
		for iNdEx := len(m.Configs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetNodeStoreDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeStoreDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNodeStoreDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNodeStoreDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeStoreDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNodeStoreDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UpdateConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Config) > 0 {
		i -= len(m.Config)
		copy(dAtA[i:], m.Config)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Config)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Env) > 0 {
		i -= len(m.Env)
		copy(dAtA[i:], m.Env)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Env)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.App) > 0 {
		i -= len(m.App)
		copy(dAtA[i:], m.App)
		i = encodeVarintServer(dAtA, i, uint64(len(m.App)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateFilterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFilterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateFilterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Env) > 0 {
		i -= len(m.Env)
		copy(dAtA[i:], m.Env)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Env)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.App) > 0 {
		i -= len(m.App)
		copy(dAtA[i:], m.App)
		i = encodeVarintServer(dAtA, i, uint64(len(m.App)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateConfiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateConfiResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateConfiResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetNodeDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNodeDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeletConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Config) > 0 {
		i -= len(m.Config)
		copy(dAtA[i:], m.Config)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Config)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Env) > 0 {
		i -= len(m.Env)
		copy(dAtA[i:], m.Env)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Env)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.App) > 0 {
		i -= len(m.App)
		copy(dAtA[i:], m.App)
		i = encodeVarintServer(dAtA, i, uint64(len(m.App)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeletFilterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletFilterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletFilterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Env) > 0 {
		i -= len(m.Env)
		copy(dAtA[i:], m.Env)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Env)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.App) > 0 {
		i -= len(m.App)
		copy(dAtA[i:], m.App)
		i = encodeVarintServer(dAtA, i, uint64(len(m.App)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintServer(dAtA []byte, offset int, v uint64) int {
	offset -= sovServer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WatchConfigStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.EnvKey)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if len(m.ConfigKeys) > 0 {
		for _, s := range m.ConfigKeys {
			l = len(s)
			n += 1 + l + sovServer(uint64(l))
		}
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovServer(uint64(len(k))) + 1 + len(v) + sovServer(uint64(len(v)))
			n += mapEntrySize + 1 + sovServer(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfigKey)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WatchConfigStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNodeStoreDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNodeStoreDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.App)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateFilterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.App)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateConfiResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNodeDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeletConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.App)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeletFilterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.App)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovServer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServer(x uint64) (n int) {
	return sovServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WatchConfigStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchConfigStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchConfigStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigKeys = append(m.ConfigKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServer
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthServer
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthServer
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthServer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigVal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigVal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigVal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchConfigStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchConfigStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchConfigStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &ConfigVal{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNodeStoreDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeStoreDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeStoreDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNodeStoreDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeStoreDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeStoreDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.App = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFilterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFilterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFilterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.App = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateConfiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateConfiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateConfiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNodeDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.App = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletFilterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletFilterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletFilterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.App = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServer = fmt.Errorf("proto: unexpected end of group")
)
